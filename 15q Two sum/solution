class Solution {
    //public int[] twoSum(int[] nums, int target) {
        //int l= nums.length; 
        // boolean flag =false;
        // int i,j=0;
        // for (i=0; i<l-1; i++){
        //     for ( j=i+1; j<=l-1; j++){
        //         if(nums[i] + nums[j]==target){
        //             flag=true;
        //             break;
        //         }
        //     }
        //     if(flag == true)
        //         break;
        // }
        // int a [] =new int[2];
        // a[0]=i;
        // a[1]=j;

        // return a;
        // my sloution is O(n^2) aka bad

    //}

    public int[] twoSum(int[] nums, int target) {
    HashMap<Integer, Integer> map = new HashMap<>(); // Step 1: Create a HashMap
    
    for (int i = 0; i < nums.length; i++) { // Step 2: Iterate through the array
        int num = nums[i]; // Current number

        if (map.containsKey(target - num)){ 
            // Step 3: Check if the complement exists in HashMap
            int idx = map.get(target - num); // Get the index of the complement
            return new int[]{idx, i}; // Step 4: Return the pair of indices
        }

        map.put(num, i); // Step 5: Store the number and its index in the HashMap
    }

    return new int[]{-1, -1}; // Step 6: If no pair found, return [-1, -1]
}

}
