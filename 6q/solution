//my solution
import java.util.ArrayList;
class Solution {
    public static boolean sortedCheck(int[] nums){
        boolean flag = true;
        int x=0;
        for(int i=0; i<nums.length; i++){
            if (i==0){
                x=nums[i];
            }
            else{
                if(nums[i]>=x){
                    x=nums[i];
                    continue;
                }
                else{
                    flag=false;
                    break;
                }
            }
        }
        return flag;
    }
    public boolean check(int[] nums) {
        boolean flag = sortedCheck(nums);
        if(flag == true){
            return flag;
        }
        //return flag;
        ArrayList<Integer> list = new ArrayList<>();
        for(int i=1;i<nums.length;i++){
            list.add(nums[i]);
            for (int j= i+1; j<nums.length; j++ ){
                list.add(nums[j]);
            }
            for(int k= 0; k<i;k++){
                list.add(nums[k]);
            }
            int[] intArray = list.stream().mapToInt(Integer::intValue).toArray();
            list.clear();
            if(sortedCheck(intArray)==true){
                return true;
            }
            else{
                flag=false;
            }
        }
        return flag;

    }
}

//optimum solution
class Solution {
    public boolean check(int[] nums) {
        int count = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] > nums[(i + 1) % nums.length])
                count++;
        }
        if (count > 1)
            return false;
        return true;
    }
}

Why it Works:
A valid rotated sorted array has at most one rotation point. For example:

[3, 4, 5, 1, 2]: Only one "out-of-order" pair: 5 > 1.
[1, 2, 3]: No "out-of-order" pairs (already sorted).
An invalid array will have multiple "out-of-order" pairs:

[2, 1, 3, 4]: Two "out-of-order" pairs: 2 > 1 and 3 > 4.
